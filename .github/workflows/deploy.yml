name: CI/CD Deploy

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure Docker for insecure registry
        run: |
          echo '{"insecure-registries": ["89.250.67.180:5000"]}' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker

      - name: Log in to Docker registry
        uses: docker/login-action@v2
        with:
          registry: 89.250.67.180:5000
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64
          push: true
          tags: 89.250.67.180:5000/filter-dividend-champions:latest

      - name: Deploy to remote server via SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            # Переходим в рабочую директорию
            mkdir -p /root/work/tg-channels/filter-dividend-champions
            cd /root/work/tg-channels/filter-dividend-champions

            # Получаем последний образ из локального реестра
            docker pull localhost:5000/filter-dividend-champions:latest

            # Проверяем наличие файла .env, создаем если отсутствует
            if [ ! -f .env ]; then
              echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" > .env
              echo "TELEGRAM_CHANNEL_ID=${{ secrets.TELEGRAM_CHANNEL_ID }}" >> .env
              # Добавляем CRON_SCHEDULE только при создании нового файла
              echo "CRON_SCHEDULE=0 9 * * 5" >> .env
              echo "Создан новый файл .env со значениями по умолчанию"
            else
              echo "Используем существующий файл .env с пользовательскими настройками"
            fi

            # Создаем docker-compose.yml, если его нет
            if [ ! -f docker-compose.yml ]; then
              echo 'version: '"'"'3.3'"'"'' > docker-compose.yml
              echo '' >> docker-compose.yml
              echo 'services:' >> docker-compose.yml
              echo '  filter-dividend-champions:' >> docker-compose.yml
              echo '    image: localhost:5000/filter-dividend-champions:latest' >> docker-compose.yml
              echo '    container_name: filter-dividend-champions' >> docker-compose.yml
              echo '    restart: always' >> docker-compose.yml
              echo '    working_dir: /app' >> docker-compose.yml
              echo '    environment:' >> docker-compose.yml
              echo '      - TZ=Europe/Berlin' >> docker-compose.yml
              echo '      - NODE_ENV=production' >> docker-compose.yml
              echo '      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}' >> docker-compose.yml
              echo '      - TELEGRAM_CHANNEL_ID=${TELEGRAM_CHANNEL_ID}' >> docker-compose.yml
              echo '      - CRON_SCHEDULE=${CRON_SCHEDULE}' >> docker-compose.yml
              echo '    extra_hosts:' >> docker-compose.yml
              echo '      - '"'"'host.docker.internal:host-gateway'"'"'' >> docker-compose.yml
              echo '    volumes:' >> docker-compose.yml
              echo '      - .:/app' >> docker-compose.yml
              echo '    logging:' >> docker-compose.yml
              echo '      driver: '"'"'json-file'"'"'' >> docker-compose.yml
              echo '      options:' >> docker-compose.yml
              echo '        max-size: '"'"'10m'"'"'' >> docker-compose.yml
              echo '        max-file: '"'"'3'"'"'' >> docker-compose.yml
            fi

            # Создаем папку для данных и файл для логов
            mkdir -p data
            touch cron.log
            chmod 666 cron.log  # Разрешение для записи из контейнера

            # Перезапускаем контейнер через docker-compose
            docker-compose down
            docker-compose up -d

            echo "Контейнер запущен. Логи будут доступны в файле cron.log."
            echo "Для ручного запуска скрипта выполните:"
            echo "docker exec filter-dividend-champions /app/run-scripts.sh"
            echo ""
            echo "Для проверки статуса cron выполните:"
            echo "docker exec filter-dividend-champions crontab -l"
