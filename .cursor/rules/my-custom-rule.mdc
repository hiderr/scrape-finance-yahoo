---
description: custom
globs: 
alwaysApply: true
---
# TypeScript & NestJS Best Practices

## Стилистика кода
- Не создавай комментарии в коде. Пиши код настолько чистым, простым и понятным, чтобы нужды в комментариях не было. Никогда не игнорируй это правило! Не оставляй комментарии в коде
- Не делай вложенные условия if else, if else if else. Заменяй такие условия на одинарный if + return
- Всегда перед return добавляй пустую строку если в функции выше есть другой код
- Распологай файлы в проекты по следующей логике. Если у какого то класса, функции, компонента (все их будем называть классом) есть типы, значит этот классом должен быть в папке с названием класса и внутри этой папки помимо кода класса должен быть файл types.ts в котором будут его типы. Ты не должен держать типы в том же файле где и код.
- Для текстовых констант всегда создавай enum и используй его

## Именование
- Используйте PascalCase для имен классов, интерфейсов, типов, enum
- Используйте camelCase для имен переменных, функций, методов
- Используйте UPPER_SNAKE_CASE для констант
- Добавляйте суффикс Interface к интерфейсам только если это необходимо для избежания конфликтов
- Используйте суффиксы Service, Controller, Module, Guard для соответствующих классов
- Используйте префикс I для интерфейсов моделей (например, IUser)

## Архитектура
- Следуйте принципу единой ответственности (SRP)
- Используйте Dependency Injection
- Разделяйте бизнес-логику и инфраструктурный код
- Группируйте связанные функции в сервисы
- Используйте репозитории для работы с БД
- Выносите конфигурацию в отдельные файлы
- Используйте DTO для валидации входящих данных

## Обработка ошибок
- Создавайте кастомные классы ошибок
- Используйте фильтры исключений NestJS
- Логируйте ошибки с контекстом
- Возвращайте понятные сообщения об ошибках
- Используйте try-catch только когда это действительно необходимо

## Асинхронность
- Используйте async/await вместо промисов
- Обрабатывайте ошибки в асинхронных функциях
- Используйте Promise.all для параллельного выполнения
- Избегайте вложенных промисов

## Типизация
- Всегда определяйте типы параметров и возвращаемых значений
- Используйте строгий режим TypeScript
- Избегайте any
- Используйте union types вместо enum где это возможно
- Определяйте интерфейсы для объектов

## Тестирование
- Пишите модульные тесты для бизнес-логики
- Используйте e2e тесты для API endpoints
- Мокайте внешние зависимости
- Следуйте принципу AAA (Arrange-Act-Assert)
- Используйте фикстуры для тестовых данных

## MongoDB & Mongoose
- Определяйте схемы для всех моделей
- Используйте индексы для оптимизации запросов
- Валидируйте данные на уровне схемы
- Используйте транзакции где необходимо
- Избегайте вложенных документов глубже 2-го уровня

## Playwright
- Группируйте тесты по функциональности
- Используйте page objects
- Изолируйте тестовые данные
- Добавляйте явные ожидания вместо таймаутов
- Делайте скриншоты при падении тестов

## Логирование
- Используйте уровни логирования (error, warn, info, debug)
- Структурируйте логи в JSON формате
- Добавляйте контекст к логам
- Не логируйте чувствительные данные
- Используйте correlation ID для отслеживания запросов
- Не оставляй комментарии в коде

## Безопасность
- Валидируйте все входящие данные
- Используйте helmet для HTTP заголовков
- Применяйте rate limiting
- Храните секреты в переменных окружения
- Используйте CORS с белым списком доменов

## Производительность
- Используйте кэширование
- Оптимизируйте запросы к БД
- Применяйте пагинацию
- Используйте компрессию ответов
- Минимизируйте количество HTTP запросов